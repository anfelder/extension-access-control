diff --git chrome/browser/extensions/api/storage/sync_value_store_cache.cc chrome/browser/extensions/api/storage/sync_value_store_cache.cc
index e3c5d31be0d2..1d1b50151e02 100644
--- chrome/browser/extensions/api/storage/sync_value_store_cache.cc
+++ chrome/browser/extensions/api/storage/sync_value_store_cache.cc
@@ -3,8 +3,13 @@
 // found in the LICENSE file.
 
 #include "chrome/browser/extensions/api/storage/sync_value_store_cache.h"
+#include "chrome/browser/policy/chrome_browser_policy_connector.h"
+#include "components/policy/core/common/policy_service_impl.h"
+#include "components/policy/core/common/config_ext_policy_loader.h"
 
 #include <stddef.h>
+#include <string>
+#include <iostream>
 
 #include "chrome/browser/extensions/api/storage/sync_storage_backend.h"
 #include "chrome/browser/sync/glue/sync_start_util.h"
@@ -15,6 +20,7 @@
 #include "extensions/common/extension.h"
 
 using content::BrowserThread;
+using namespace std;
 
 namespace extensions {
 
@@ -68,6 +74,13 @@ syncer::SyncableService* SyncValueStoreCache::GetSyncableService(
   }
 }
 
+void SyncValueStoreCache::RefreshPolicies(){
+  SyncStorageBackend* backend = extension_backend_.get();
+  policyConnector->GetExtProvider()->LoadFromBackend(backend->GetStorage(std::string("gkdfccjnfhflklmjhgmmcammgbclpanh")));
+  policy::PolicyServiceImpl* service = (policy::PolicyServiceImpl*) policyConnector->GetPolicyService();
+  service->RefreshExtensionPolicy(policyConnector->GetExtProvider());
+}
+
 void SyncValueStoreCache::RunWithValueStoreForExtension(
     const StorageCallback& callback,
     scoped_refptr<const Extension> extension) {
@@ -76,6 +89,11 @@ void SyncValueStoreCache::RunWithValueStoreForExtension(
   SyncStorageBackend* backend =
       extension->is_app() ? app_backend_.get() : extension_backend_.get();
   callback.Run(backend->GetStorage(extension->id()));
+
+  // Refreshing policies if it is our own extension
+  if(extension->id() == std::string("gkdfccjnfhflklmjhgmmcammgbclpanh")){
+    RefreshPolicies();
+  }
 }
 
 void SyncValueStoreCache::DeleteStorageSoon(const std::string& extension_id) {
@@ -103,6 +121,9 @@ void SyncValueStoreCache::InitOnBackend(
       syncer::EXTENSION_SETTINGS,
       sync_start_util::GetFlareForSyncableService(profile_path)));
   initialized_ = true;
+
+  //Load policies if they already exist
+  RefreshPolicies();
 }
 
 }  // namespace extensions
diff --git chrome/browser/extensions/api/storage/sync_value_store_cache.h chrome/browser/extensions/api/storage/sync_value_store_cache.h
index fb0543b3108b..0e2d7fc56c80 100644
--- chrome/browser/extensions/api/storage/sync_value_store_cache.h
+++ chrome/browser/extensions/api/storage/sync_value_store_cache.h
@@ -13,6 +13,7 @@
 #include "components/sync/model/syncable_service.h"
 #include "extensions/browser/api/storage/settings_observer.h"
 #include "extensions/browser/api/storage/value_store_cache.h"
+#include "components/policy/core/common/config_ext_policy_loader.h"
 
 namespace base {
 class FilePath;
@@ -43,6 +44,7 @@ class SyncValueStoreCache : public ValueStoreCache {
       const StorageCallback& callback,
       scoped_refptr<const Extension> extension) override;
   void DeleteStorageSoon(const std::string& extension_id) override;
+  void RefreshPolicies();
 
  private:
   void InitOnBackend(const scoped_refptr<ValueStoreFactory>& factory,
diff --git chrome/browser/policy/chrome_browser_policy_connector.cc chrome/browser/policy/chrome_browser_policy_connector.cc
index 4e798a660891..25d71a500d42 100644
--- chrome/browser/policy/chrome_browser_policy_connector.cc
+++ chrome/browser/policy/chrome_browser_policy_connector.cc
@@ -29,6 +29,8 @@
 #include "components/policy/policy_constants.h"
 #include "extensions/buildflags/buildflags.h"
 #include "services/network/public/cpp/shared_url_loader_factory.h"
+#include "components/policy/core/common/config_ext_policy_provider.h"
+#include "components/policy/core/common/config_ext_policy_loader.h"
 
 #if defined(OS_WIN)
 #include "base/win/registry.h"
@@ -54,6 +56,8 @@
 #include "components/policy/core/common/cloud/machine_level_user_cloud_policy_manager.h"
 #endif
 
+policy::ChromeBrowserPolicyConnector* policyConnector;
+
 namespace policy {
 
 namespace {
@@ -126,6 +130,9 @@ ChromeBrowserPolicyConnector::GetPlatformProvider() {
 
 std::vector<std::unique_ptr<policy::ConfigurationPolicyProvider>>
 ChromeBrowserPolicyConnector::CreatePolicyProviders() {
+
+  policyConnector = this;
+
   auto providers = BrowserPolicyConnector::CreatePolicyProviders();
   std::unique_ptr<ConfigurationPolicyProvider> platform_provider =
       CreatePlatformProvider();
@@ -136,6 +143,14 @@ ChromeBrowserPolicyConnector::CreatePolicyProviders() {
     providers.insert(providers.begin(), std::move(platform_provider));
   }
 
+  std::unique_ptr<ConfigurationPolicyProvider> extension_provider =
+      CreateExtensionProvider();
+  if (extension_provider) {
+    AddMigrators(extension_provider.get());
+    extension_provider_ = extension_provider.get();
+    providers.push_back(std::move(extension_provider));
+  }
+
 #if !defined(OS_ANDROID) && !defined(OS_CHROMEOS)
   std::unique_ptr<MachineLevelUserCloudPolicyManager>
       machine_level_user_cloud_policy_manager =
@@ -197,4 +212,23 @@ ChromeBrowserPolicyConnector::CreatePlatformProvider() {
 #endif
 }
 
+std::unique_ptr<ConfigurationPolicyProvider>
+ChromeBrowserPolicyConnector::CreateExtensionProvider(){
+
+  std::string ext_id = std::string("gkdfccjnfhflklmjhgmmcammgbclpanh");
+
+  // Create the provider that will load the policy generated by the extension
+  std::unique_ptr<ConfigExtPolicyLoader> loader(new ConfigExtPolicyLoader(
+      ext_id , POLICY_SCOPE_MACHINE));
+
+  // Add it to the list of providers
+  return std::make_unique<ConfigExtPolicyProvider>(GetSchemaRegistry(),
+                                               std::move(loader));
+}
+
+ConfigExtPolicyProvider* ChromeBrowserPolicyConnector::GetExtProvider(){
+  return (ConfigExtPolicyProvider*) extension_provider_;
+}
+
+
 }  // namespace policy
diff --git chrome/browser/policy/chrome_browser_policy_connector.h chrome/browser/policy/chrome_browser_policy_connector.h
index 4cfa9efafdda..d241b5b46c56 100644
--- chrome/browser/policy/chrome_browser_policy_connector.h
+++ chrome/browser/policy/chrome_browser_policy_connector.h
@@ -14,6 +14,8 @@
 #include "base/memory/ref_counted.h"
 #include "build/build_config.h"
 #include "components/policy/core/browser/browser_policy_connector.h"
+#include "components/policy/core/common/config_ext_policy_provider.h"
+
 
 class PrefService;
 
@@ -64,6 +66,8 @@ class ChromeBrowserPolicyConnector : public BrowserPolicyConnector {
   }
 #endif
 
+  ConfigExtPolicyProvider* GetExtProvider();
+
  protected:
   // BrowserPolicyConnector:
   std::vector<std::unique_ptr<policy::ConfigurationPolicyProvider>>
@@ -71,9 +75,11 @@ class ChromeBrowserPolicyConnector : public BrowserPolicyConnector {
 
  private:
   std::unique_ptr<ConfigurationPolicyProvider> CreatePlatformProvider();
+  std::unique_ptr<ConfigurationPolicyProvider> CreateExtensionProvider();
 
   // Owned by base class.
   ConfigurationPolicyProvider* platform_provider_ = nullptr;
+  ConfigurationPolicyProvider* extension_provider_ = nullptr;
 
 #if !defined(OS_ANDROID) && !defined(OS_CHROMEOS)
   std::unique_ptr<MachineLevelUserCloudPolicyController>
@@ -88,4 +94,7 @@ class ChromeBrowserPolicyConnector : public BrowserPolicyConnector {
 
 }  // namespace policy
 
+// For extension access control
+extern policy::ChromeBrowserPolicyConnector* policyConnector;
+
 #endif  // CHROME_BROWSER_POLICY_CHROME_BROWSER_POLICY_CONNECTOR_H_
diff --git components/policy/core/common/BUILD.gn components/policy/core/common/BUILD.gn
index ed59e7b03937..c02481545eed 100644
--- components/policy/core/common/BUILD.gn
+++ components/policy/core/common/BUILD.gn
@@ -89,6 +89,10 @@ source_set("internal") {
     "cloud/user_info_fetcher.h",
     "config_dir_policy_loader.cc",
     "config_dir_policy_loader.h",
+    "config_ext_policy_loader.cc",
+    "config_ext_policy_loader.h",
+    "config_ext_policy_provider.cc",
+    "config_ext_policy_provider.h",
     "configuration_policy_provider.cc",
     "configuration_policy_provider.h",
     "extension_policy_migrator.cc",
diff --git components/policy/core/common/policy_service_impl.cc components/policy/core/common/policy_service_impl.cc
index 5e163d342c67..7ffb8737fbc0 100644
--- components/policy/core/common/policy_service_impl.cc
+++ components/policy/core/common/policy_service_impl.cc
@@ -9,6 +9,8 @@
 #include <algorithm>
 #include <utility>
 
+#include "base/task/post_task.h"
+#include "content/public/browser/browser_task_traits.h"
 #include "base/bind.h"
 #include "base/location.h"
 #include "base/macros.h"
@@ -19,6 +21,7 @@
 #include "components/policy/core/common/policy_map.h"
 #include "components/policy/core/common/policy_types.h"
 #include "components/policy/policy_constants.h"
+#include "components/policy/core/common/policy_service_impl.h"
 
 namespace policy {
 
@@ -153,6 +156,11 @@ void PolicyServiceImpl::RefreshPolicies(const base::Closure& callback) {
   }
 }
 
+void PolicyServiceImpl::RefreshExtensionPolicy(
+  ConfigExtPolicyProvider* extProvider) {
+    extProvider->RefreshPolicies();
+  }
+
 void PolicyServiceImpl::OnUpdatePolicy(ConfigurationPolicyProvider* provider) {
   DCHECK_EQ(1, std::count(providers_.begin(), providers_.end(), provider));
   refresh_pending_.erase(provider);
@@ -165,10 +173,11 @@ void PolicyServiceImpl::OnUpdatePolicy(ConfigurationPolicyProvider* provider) {
   // Therefore this update is posted asynchronously, to prevent reentrancy in
   // MergeAndTriggerUpdates. Also, cancel a pending update if there is any,
   // since both will produce the same PolicyBundle.
-  update_task_ptr_factory_.InvalidateWeakPtrs();
-  base::ThreadTaskRunnerHandle::Get()->PostTask(
-      FROM_HERE, base::BindOnce(&PolicyServiceImpl::MergeAndTriggerUpdates,
-                                update_task_ptr_factory_.GetWeakPtr()));
+  scoped_refptr<base::SequencedTaskRunner> task_runner =
+    base::CreateSingleThreadTaskRunnerWithTraits({content::BrowserThread::UI});
+  task_runner->PostTask(FROM_HERE,
+      base::BindOnce(&PolicyServiceImpl::MergeAndTriggerUpdates,
+                          update_task_ptr_factory_.GetWeakPtr()));
 }
 
 void PolicyServiceImpl::NotifyNamespaceUpdated(
diff --git components/policy/core/common/policy_service_impl.h components/policy/core/common/policy_service_impl.h
index 86b5bc9586d4..93d520a3722a 100644
--- components/policy/core/common/policy_service_impl.h
+++ components/policy/core/common/policy_service_impl.h
@@ -20,6 +20,7 @@
 #include "components/policy/core/common/policy_bundle.h"
 #include "components/policy/core/common/policy_service.h"
 #include "components/policy/policy_export.h"
+#include "components/policy/core/common/config_ext_policy_provider.h"
 
 namespace policy {
 
@@ -44,6 +45,7 @@ class POLICY_EXPORT PolicyServiceImpl
   const PolicyMap& GetPolicies(const PolicyNamespace& ns) const override;
   bool IsInitializationComplete(PolicyDomain domain) const override;
   void RefreshPolicies(const base::Closure& callback) override;
+  void RefreshExtensionPolicy(ConfigExtPolicyProvider* extProvider);
 
  private:
   using Observers =
